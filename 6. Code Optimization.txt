write program for code optimization

Certainly! Code optimization is essential for improving the performance and efficiency of C programs. Let's explore some basic code optimization techniques:

1. **Unroll Small Loops:**
   - Manually unroll loops to reduce loop overhead.
   - Example:
     ```c
     // Original loop
     for (int i = 1; i < 5; ++i) {
         // ...
     }

     // Unrolled loop
     int fact[5] = {1, 1, 2, 6, 24};
     ```

2. **Avoid Calculations Inside Loops:**
   - Pre-calculate constant expressions outside the loop.
   - Example:
     ```c
     // Original loop
     for (int i = 0; i < 1000; ++i) {
         arr[i] = (((c % d) * a / b) % d) * i;
     }

     // Pre-calculate constant expression
     int temp = (((c % d) * a / b) % d);
     for (int i = 0; i < 1000; ++i) {
         arr[i] = temp * i;
     }
     ```

3. **Avoid Pointer Dereferencing Inside Loops:**
   - Assign pointer values to temporary variables before using them inside loops.
   - Example:
     ```c
     // Original loop
     for (int i = 1; i < 11; ++i) {
         *iptr = *iptr + i;
     }

     // Use a temporary variable
     int temp = *iptr;
     for (int i = 1; i < 11; ++i) {
         temp = temp + i;
     }
     *iptr = temp;
     ```

4. **Use Register Variables for Loop Counters:**
   - Register variables are stored in CPU registers, improving access speed.
   - Example:
     ```c
     register int i = 0;
     register int j = 0;
     int n = 5;
     for (i = 0; i < n; ++i) {
         for (j = 0; j <= i; ++j) {
             printf("* ");
         }
         printf("\n");
     }
     ```

