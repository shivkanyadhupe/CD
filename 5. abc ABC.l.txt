%option noyywrap
%{
#include <stdio.h>
#include <string.h>

int character_count = 0;
int word_count = 0;
int line_count = 0;

int is_comment_line(char *str) {
    return str[0] == '#';
}
%}

%%

[^#]|\n+  { /* Skip comments and count lines */
            if (!is_comment_line(yytext)) {
                character_count += yyleng;
                word_count += (strchr(yytext, ' ') == NULL); // Simple word count
                printf("%s", yytext);
            }
            line_count++;
          }

.|\n        { /* Handle any other character (error handling optional) */ }

%%

int main() {
    yyin = fopen("input.txt", "r");
    if (yyin == NULL) {
        perror("fopen");
        return 1;
    }

    yylex();

    printf("\nLines (excluding comments): %d\n", line_count);
    printf("Words: %d\n", word_count);
    printf("Characters: %d\n", character_count);

    fclose(yyin);
    return 0;
}



.......................................................

 Explanation: 

1.  LEX Header (`%{ ... %}`): 
   - Includes `stdio.h` for input/output and `string.h` for string manipulation functions.
   - Declares variables to store counts:
     - `character_count` for total characters.
     - `word_count` for total words (simple count based on spaces).
     - `line_count` for total lines (excluding comments).
   - Defines an `is_comment_line` function to check if a line starts with '#'.

2.  LEX Rules (`%% ... %%`): 
   - `[^#]|\n+`: Matches any character except `#` or newlines. Increments `line_count` and checks for comments using `is_comment_line`.
     - If not a comment:
       - Increments `character_count` by the length of the matched text.
       - Increments `word_count` if no space is found in the matched text (simple word detection).
       - Prints the matched text (`printf`).
   - `.|\n`: Matches any other character (optional error handling could be added here).

3.  C Code (`int main() ... `): 
   - Opens the input file "input.txt" for reading.
   - Calls `yylex()` to start the lexical analysis process defined by the LEX specifications.
   - Prints the counts of lines (excluding comments), words, and characters.
   - Closes the input file.



How to Run
1. flex file_name.l
2. gcc lex.yy.c
3. ./a.exe
